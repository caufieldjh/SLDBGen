import csv
import os
import wget
from .parsers.sl_constants import SlConstants
from .hgnc_parser import HgncParser


class SL_DatasetParser:
    def __init__(self, fname, pmid, entrez=None, ensembl=None, synonym=None):
        """
        entrez and ensembl are dictionaries from a gene symbol to an entrez or ensembl id
        The dictionaries are generated by he HgncParser. 
        If they are not parsed, this constructor will generate them.
        """
        if fname is not None and not os.path.exists(fname):
            raise ValueError("SL dataset %s does not exist" % fname)
        # Download HGNS file if necessary
        if entrez is None or ensembl is None or synonym is None:
            SL_DatasetParser.get_hgnc_file()
            hgnc_fname = SL_DatasetParser.get_local_hgncfile_name()
            parser = HgncParser(hgnc_fname)
            self.entrez_dict = parser.get_entrez_dictionary()
            self.ensembl_dist = parser.get_ensembl_dictionary()
            self.synonym_dict = parser.get_synonym_dictionary()
        else:
            self.entrez_dict = entrez
            self.ensembl_dist = ensembl
            self.synonym_dict = synonym
        self.fname = fname
        self.pmid = pmid

    def _mark_maximum_entries(self, sli_dict):
        """
        The parsing functions add all SLIs for gene A & B to a list
        Here, we get a dictionary of lists (the list can have one or more entry)
        The keys are GenePair objects.
        We need to mark one entry in each list as being the Max=True
        """
        sli_list = []
        for k, vlist in sli_dict.items():
            vlist.sort(key=lambda x: abs(x.effect_size), reverse=True)
            sli = vlist[0]
            sli.set_maximum()
            sli_list.append(sli)
            for s in vlist[1:]:
                sli_list.append(s)
        return sli_list

    def parse(self):
        """
        This method must be implemented by subclasses
        """
        raise NotImplementedError

    def get_current_symbol(self, symbol):
        if symbol in self.entrez_dict:
            return symbol
        elif symbol not in self.synonym_dict:
            return symbol  # Could not find it, this will lead to an error
        else:
            s = self.synonym_dict[symbol]
            if s == 'MULTIPLE':
                return symbol
            else:
                return s

    def get_ncbi_gene_curie(self, symbol):
        id = self.entrez_dict.get(symbol)
        if id is None:
            raise ValueError("sl_dataset_parser.py Could not find id for %s" % symbol)
        else:
            return 'NCBIGene:%s' % id

    @staticmethod
    def get_hgnc_file():
        """
        Download the file  ftp://ftp.ebi.ac.uk/pub/databases/genenames/hgnc/tsv/locus_groups/protein-coding_gene.txt
        ftp://ftp.ebi.ac.uk/pub/databases/genenames/hgnc/tsv/non_alt_loci_set.txt
        """
        urldir = 'ftp://ftp.ebi.ac.uk/pub/databases/genenames/hgnc/tsv/locus_groups/protein-coding_gene.txt'
        local_filename = 'protein-coding_gene.txt'
        if not os.path.exists(local_filename):
            print("[INFO] Will download ", local_filename)
            local_filename = wget.download(urldir)
        if not os.path.exists(local_filename):
            raise Exception("Failed to download %s from %s" % (local_filename, urldir))

    @staticmethod
    def get_local_hgncfile_name():
        return 'protein-coding_gene.txt'
